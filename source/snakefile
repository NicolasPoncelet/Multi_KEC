import yaml
from pathlib import Path
from script.prepare_kec_input import prepare_kec_input
from script.prepare_primer3_input import prepare_primer3_input
from script.generate_input_path import get_input_path

configfile: "config/config.yaml"

with open("config/config.yaml", "r") as infile:
    config_yaml = yaml.safe_load(infile)

GENOME_DIR = Path(config_yaml["genomes_dir"]).resolve()
OUTPUT_DIR = Path(config_yaml["analysis_dir"]).resolve()
KEC_TOOL = Path("../tools/kec-linux-x86").resolve()

genera = [d.name for d in GENOME_DIR.iterdir() if d.is_dir()]

rule all:
    input:
        # Dépendre directement des sorties du checkpoint
        expand(f"{OUTPUT_DIR}/3_Primer3_input/{{genus}}/primer3.done", genus=genera)

rule prepare_all_genomes:
    input:
        genomes_dir = GENOME_DIR
    output:
        done_flags = expand(f"{OUTPUT_DIR}/1_KEC_input/{{genus}}/flag.done", genus=genera)
    run:
        prepare_kec_input(
            str(input.genomes_dir),  # Convertir en string pour compatibilité
            Path(output.done_flags[0]).parent.parent
        )

rule kec_include:
    input:
        flag = f"{OUTPUT_DIR}/1_KEC_input/{{genus}}/flag.done"
    output:
        target_files = f"{OUTPUT_DIR}/1_KEC_input/{{genus}}/target/{{genus}}.fasta"
    params:
        kec_include_settings = config_yaml["kec_include_settings"],
        master_dir = f"{OUTPUT_DIR}/1_KEC_input/{{genus}}/master",
        pool_dir = f"{OUTPUT_DIR}/1_KEC_input/{{genus}}/pool"
    shell:
        """
        {KEC_TOOL} include \
        -m {params.master_dir} \
        -p {params.pool_dir} \
        -o {output.target_files} \
        {params.kec_include_settings}
        """

rule kec_exclude:
    input:
        target = rules.kec_include.output.target_files,
    output:
        fasta_files = f"{OUTPUT_DIR}/2_KEC_output/{{genus}}.fasta"
    params:
        kec_exclude_settings = config_yaml["kec_exclude_settings"],
        non_target = f"{OUTPUT_DIR}/1_KEC_input/{{genus}}/non_target"
    resources:
        mem_mb=20000 
    shell:
        """
        {KEC_TOOL} exclude \
        -t {input.target} \
        -n {params.non_target} \
        -o {output.fasta_files} \
        {params.kec_exclude_settings}
        """

rule prepare_primer3_input:
    input:
        fasta_files = rules.kec_exclude.output.fasta_files
    output:
        primer3_flag = f"{OUTPUT_DIR}/3_Primer3_input/{{genus}}/flag.done"
    run:
        prepare_primer3_input(
            str(input.fasta_files),
            Path(output.primer3_flag).parent
        )

checkpoint primer3:
    input:
        primer3_flag = f"{OUTPUT_DIR}/3_Primer3_input/{{genus}}/flag.done"
    output:
        touch(f"{OUTPUT_DIR}/3_Primer3_input/{{genus}}/primer3.done")
    params:
        input_dir = f"{OUTPUT_DIR}/3_Primer3_input/{{genus}}"
    script:
        # Script pour traiter dynamiquement tous les fichiers .txt générés
        """
        import os
        from pathlib import Path
        
        input_dir = Path("{params.input_dir}")
        txt_files = list(input_dir.rglob("*.txt"))
        
        for txt_file in txt_files:
            output_file = txt_file.with_suffix(".primer")
            os.system(f"primer3_core {{txt_file}} > {{output_file}}")
        """