import yaml
from pathlib import Path
from script.prepare_kec_input import prepare_kec_input
from script.prepare_primer3_input import prepare_primer3_input
from script.generate_input_path import get_input_path
from script.compile_logs import compile_logs
from script.select_best_runs import select_best_runs


configfile: "config/config.yaml"

with open("config/config.yaml", "r") as infile:
    config_yaml = yaml.safe_load(infile)

GENOME_DIR = Path(config_yaml["genomes_dir"]).resolve()
OUTPUT_DIR = Path(config_yaml["analysis_dir"]).resolve()
KEC_TOOL = Path("../tools/kec-linux-x64").resolve()
KMER_INCLUDE = config["kec_include_settings"]["kmer_values"]
KMER_EXCLUDE = config["kec_exclude_settings"]["kmer_values"]

genera = [d.name for d in GENOME_DIR.iterdir() if d.is_dir()]

rule all:
    input:
        kec_ex = expand(f"{OUTPUT_DIR}/2_KEC_output/{{genus}}/{{kmer_in}}_{{kmer_ex}}{{genus}}.fasta",
                genus=genera,
                kmer_in = KMER_INCLUDE,
                kmer_ex = KMER_EXCLUDE),
        primer3_output_flag = f"{OUTPUT_DIR}/4_Primer3_output/{{genus}}/primer3.done"

rule prepare_input:
    """
    Cette règle crée TOUTE l'arborescence 1_KEC_input/<genus>/<k_in>_<k_ex>/
    et place les symlinks dans 'master', 'pool', 'non_target', ainsi qu'un 'flag.done'.

    Elle appelle la fonction prepare_kec_input(...) qui boucle déjà sur
    tous les sous-répertoires (chaque genre) et sur toutes les combinaisons
    (k_in, k_ex).
    """
    input:
        dir=GENOME_DIR
    output:
        done_flags=expand(
            "{analysis_dir}/1_KEC_input/{genus}/{k_in}_{k_ex}/flag.done",
            analysis_dir=str(OUTPUT_DIR),
            genus=genera,
            k_in=KMER_INCLUDE,
            k_ex=KMER_EXCLUDE
        )
    run:
        prepare_kec_input(
            input_dir=str(input.dir),
            output_dir=str(OUTPUT_DIR / "1_KEC_input"),   
            kmer_includes=KMER_INCLUDE,
            kmer_excludes=KMER_EXCLUDE,
            config_file="config/config.yaml"
        )

rule kec_include:
    input:
        flag = rules.prepare_input.output.done_flags
    output:
        target_files = f"{OUTPUT_DIR}/1_KEC_input/{{genus}}/{{kmer_in}}_{{kmer_ex}}/target/{{genus}}.fasta"
    params:
        kec_include_settings = config_yaml["kec_include_settings"]["kec_params"],
        master_dir = f"{OUTPUT_DIR}/1_KEC_input/{{genus}}/{{kmer_in}}_{{kmer_ex}}/master",
        pool_dir = f"{OUTPUT_DIR}/1_KEC_input/{{genus}}/{{kmer_in}}_{{kmer_ex}}/pool"
    shell:
        """
        {KEC_TOOL} include \
        -m {params.master_dir} \
        -p {params.pool_dir} \
        -o {output.target_files} \
        -k {wildcards.kmer_in} \
        {params.kec_include_settings}
        """

rule kec_exclude:
    input:
        target = rules.kec_include.output.target_files,
    output:
        fasta_files = f"{OUTPUT_DIR}/2_KEC_output/{{genus}}/{{kmer_in}}_{{kmer_ex}}/{{genus}}.fasta"
    params:
        kec_exclude_settings = config_yaml["kec_exclude_settings"]["kec_params"],
        non_target = f"{OUTPUT_DIR}/1_KEC_input/{{genus}}/{{kmer_in}}_{{kmer_ex}}/non_target"
    shell:
        """
        {KEC_TOOL} exclude \
        -t {input.target} \
        -n {params.non_target} \
        -o {output.fasta_files} \
        -k {wildcards.kmer_ex} \
        {params.kec_exclude_settings}
        """

rule compile_run_infos:
    input:
        rules.kec_exclude.output
    output:
        kec_report = f"{OUTPUT_DIR}/0_Final/KEC_run_info.csv"
    run:
        compile_logs(
            log_dir = "logs/",
            output_file = output.kec_report)

rule prepare_primer3_input:
    input:
        fasta_files = select_best_runs(
            rules.compile_run_infos.output.kec_report,
            f"{OUTPUT_DIR}/2_KEC_output/",
            f"{OUTPUT_DIR}/0_Final/KEC_best_run.csv")
    output:
        primer3_flag = f"{OUTPUT_DIR}/3_Primer3_input/{{genus}}/flag.done"
    run:
        fasta_dir = input.fasta_files

        prepare_primer3_input(
            fasta_dir,
            f"{OUTPUT_DIR}/3_Primer3_input/",
            f"{OUTPUT_DIR}/0_Final/KEC_summary.csv"
        )

rule primer3:
    input: 
        primer3_input_flag = rules.prepare_primer3_input.output.primer3_flag
    output: 
        primer3_output_flag = f"{OUTPUT_DIR}/4_Primer3_output/{{genus}}/primer3.done"
    conda:
        "envs/primer3.yaml"  
    params:
        input_dir = f"{OUTPUT_DIR}/3_Primer3_input/{{genus}}",
        output_dir = f"{OUTPUT_DIR}/4_Primer3_output/{{genus}}"
    shell:
        """
        mkdir -p {params.output_dir}
        for txt_file in {params.input_dir}/*.txt; do
            primer3_core "$txt_file" > {params.output_dir}/$(basename "$txt_file" .txt).primer
        done
        touch {output.primer3_output_flag}
        """
